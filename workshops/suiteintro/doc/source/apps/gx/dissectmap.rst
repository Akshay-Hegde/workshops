.. _apps.gx.dissectmap:

Dissecting the map code
=======================

As demonstrated in the previous section, a map window is generated by bringing together a minimal HTML document, application initialization code, and configuration objects.  We'll look at each of these parts of our map in a bit more detail.

Markup
------

HTML
~~~~

Every web application needs at least a basic HTML document as a container. It does not need to contain human readable markup in this case, so it has an empty ``<body>``.

.. code-block:: html

    <body><!-- Oh no you didn't !!! --></body>

(This case differs from OpenLayers, where a block-level element was required to position the map.)  

All of the required script and style resources are loaded in the ``<head>`` element ...

Ext JS
~~~~~~

First we load Ext JS libraries:

.. code-block:: html

    <script src="http://extjs.cachefly.net/ext-3.4.0/adapter/ext/ext-base.js" type="text/javascript"></script>
    <script src="http://extjs.cachefly.net/ext-3.4.0/ext-all.js"  type="text/javascript"></script>

Ext JS can be used as a standalone framework, or together with JavaScript frameworks like JQuery. Depending on this environment, an appropriate adapter has to be loaded first. Since we are using Ext JS standalone, we use the ``ext-base.js`` library. In the second line, we load the main Ext JS ``ext-all.js`` library.

Finally, we load the stylesheet required by Ext JS:

.. code-block:: html

    <link rel="stylesheet" type="text/css" href="http://extjs.cachefly.net/ext-3.4.0/resources/css/ext-all.css" />

This loads all CSS that Ext JS needs to use the default theme. To customize your map application, additional CSS resources can be added.

OpenLayers
~~~~~~~~~~

GeoExt also requires OpenLayers. So we also have to load the OpenLayers libraries.

.. code-block:: html

    <script src="http://www.openlayers.org/api/2.11/OpenLayers.js></script>

GeoExt
~~~~~~

Finally, we can load the GeoExt library that pulls everything together:

.. code-block:: html

    <script type="text/javascript" src="http://api.geoext.org/1.1/script/GeoExt.js"></script>

.. note::

    When using GeoExt, you also benefit from all the functionality that standalone Ext JS and OpenLayers provide. You can add GeoExt to your existing Ext JS and OpenLayers applications without breaking anything.

Initialization Code
-------------------

Initialization is done entirely in Javascript and usually consists of two stages:

* initialize the application itself
* initialize the user interface

.. code-block:: html

   <script type="text/javascript">

   Ext.onReady(function() {

      var world = new OpenLayers.Layer.WMS(
        "Global Imagery",
        "/geoserver/wms/",
        {layers: "earthmap"}
      );

      var mapwin = new Ext.Window({
      
        /** Map Window Configuration Object **/
      
      });

      mapwin.show();

   });

   </script>

Initialize the application
~~~~~~~~~~~~~~~~~~~~~~~~~~

To initialize the application, we:

* Define an OpenLayers layer object (based on our local GeoServer ``earth`` group layer).
* Create a new ``Ext.Window`` saved as as the variable mapwin

Initialize the user interface
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To initialize the user interface, we:

* Call the .show() method on the Ext.Window

Configuration Objects
---------------------

The part of our map application where the map is drawn is contained in the **configuration object** (see the comment in the above code).

In Ext JS, you create configuration objects instead of writing code for most basic tasks, which usually makes application development easier and faster. All constructors take a single argument, which we will be referring to as a "configuration object".

Like all JavaScript objects, this configuration object is wrapped in curly braces, and contains ``key: value`` pairs. Let's have a look at the configuration object for our map window:

.. code-block:: javascript

   {
      title: "GeoExt Map 1",
      width: 600,
      height: 400,
      layout: "fit",
      items: {
         xtype: "gx_mappanel",
         layers: [world]
      }
   }

In this code, we set some simple properties, like the ``title``, ``width`` and ``height`` of our window.

We also set the ``layout`` to "fit", which means that the window will have one item that fills up the entire window space.

Since other layouts can position more than just one item, we use an array (square braces) for a list of the window's items -- in our case just one: a *GeoExt Map Panel*.

We configure our ``GeoExt.MapPanel``. To do this, we start a nested object by declaring an ``xtype`` of "gx_mappanel".  

The ``GeoExt.MapPanel`` configuration takes another property: an array of ``layers``.

For our simple map window example, we just want to show a single WMS layer: ``world`` which we've already defined with a now familiar syntax.

.. note::

    The following two notations are equivalent:

    * ``new GeoExt.MapPanel({layers: [/* ... */]});``
    * ``{xtype: "gx_mappanel", layers: [/* ... */]});``

    Ext JS keeps a registry of available `components <http://www.extjs.com/deploy/dev/docs/?class=Ext.Component>`_, called "xtypes". GeoExt adds its components to this registry. To make them distinguishable from other non-GeoExt components, their names start with the "gx" prefix.
