.. _apps.ol.dissectmap:

Dissecting Your Map
===================

As mentioned in the previous section, a map is generated by bringing together the necessary:

* Libraries 
* Markup
* Style declarations
* Initialization code

Using our simple map from the previous section, let's look at each of these parts in more detail. The :file:`map1.html` file should still be open in your text editor.

Library loading
---------------

The header of the document loads necessary JavaScript and CSS files to be included with the map. In the ``<head>`` element, the OpenLayers JavaScript library is loaded (:file:`OpenLayers.js`), followed by a default stylesheet (:file:`style.css`) that specifies how map-related elements should be styled.

.. code-block:: html

   <script src="http://openlayers.org/api/OpenLayers.js"></script>
   <link rel="stylesheet" href="openlayers/theme/default/style.css" type="text/css"> 

Let's skip the ``<style>`` tag for a moment, and jump down to the ``<body>``.

Markup
------

The markup for the map generates a single document element:

.. code-block:: html

   <div id="map-id"></div>

This element will serve as the container for our map viewport.

Here we use a ``<div>`` element, although the container for the viewport can be any block-level element.

We also give the container an ``id`` attribute so we can reference it in our code.

Map style
---------

We've already noticed that OpenLayers includes a default stylesheet. However, OpenLayers doesn't make any guesses about the size of your map/viewport container. 

Because of this, we need to also include at least one style declaration to make room on the page for the map. This is the ``<style>`` element in the ``<head>``:

.. code-block:: html

   <style>
       #map-id {
           width: 512px;
           height: 256px;
       }
   </style>

We use the map container's ``id`` value as a selector (``#map-id``), and then we specify the width (``512px``) and the height (``256px``) for the map container.

.. note:: Although the style declarations are directly included in the ``<head>`` of our document. In many cases, your map-related style declarations would be a part of an external stylesheet as part of a larger website theme.

Map initialization code
-----------------------

The next step in generating your map is to include some initialization code.  This is where we determine the **content** of our map.  In our case, we have included a ``<script>`` element at the bottom of our document's ``<body>`` to do the work.

.. note::  We put the initialization code at the bottom of the ``<body>`` of our document, when we could have loaded it with the OpenLayers library in the ``<head>``.  We did this because our initialization code cannot run until both the OpenLayers library is loaded and the document element that serves as the viewport container (the ``<div>``) is fully loaded. By including the initialization code below this element in the ``<body>`` markup, we ensure that the library is loaded and the viewport container is ready before generating our OpenLayers map.

.. code-block:: html

        <script>
          var map = new OpenLayers.Map("map-id");
          var world = new OpenLayers.Layer.WMS(
	      "Earth",
	      "http://localhost:8080/geoserver/wms",
	      {layers: "earthmap"}
	    );
          map.addLayer(world);
          map.zoomToMaxExtent();
        </script>

The first line of our script creates a new ``OpenLayers.Map`` object, which is known as a **constructor**:

.. code-block:: javascript

   var map = new OpenLayers.Map("map-id");

This line also tells the map constructor to render the map in the the viewport container, selected by its ``id`` attribute value (``map-id``). 

This constructor (referred to by the JavaScript variable name ``map``) will create the map in the ``<div>`` element created above.

.. note::  The above syntax is a shortcut for convenience. We could be more explicit and provide a direct reference to the element (e.g. ``document.getElementById("map-id")``).

The next few lines creates a map layer:

.. code-block:: javascript

          var world = new OpenLayers.Layer.WMS(
                              "Earth",
                              "/geoserver/wms",
                              {layers: "earthmap"}
                            );


Don't worry about the syntax here if this part is new to you. The important part to understand is that our map view will be a collection of layers. 

Here we have described one layer, a :abbr:`WMS (Web Map Service)` layer served from our existing GeoServer instance, called "earthmap", and saved this layer with the variable ``earth``.

The next line adds our one layer to our map.

.. code-block:: javascript

   map.addLayer(world);

The final step is to set the initial geographic limits of the map display, which is known as the **extent**.  This specifies the minimum bounding rectangle of the map area in the form of (Xmin,Ymin,Xmax,Ymax).  There are a number of ways to specify this initial extent. In our example, we use a simple request to zoom to map to the maximum extent. By default, this layer's maximum extent is the entire world in geographic coordinates, so our map will zoom out all the way.

.. code-block:: javascript

   map.zoomToMaxExtent();

And that's a very simple map!

.. note:: It's easy to get confused by multiple uses of the word "map".  We named our map constructor by the variable "map" in the first line of our initialization code.  If we had used the variable, say, "hello", our first line of code would have been ``var hello = new OpenLayers.Map("map-id");``, and this line above would read ``hello.addLayer(world)``.
